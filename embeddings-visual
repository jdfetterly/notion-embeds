<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Semantic Space Explorer: Embeddings Visual</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f4f8; /* Light blue-gray background */
        }
        .container {
            max-width: 900px;
        }
        .word-point {
            fill: #3b82f6; /* Blue dot */
            cursor: pointer;
            transition: r 0.2s ease, fill 0.2s ease;
            pointer-events: auto; /* Explicitly ensure it's clickable */
            r: 6; /* Slightly larger default radius for easier clicking */
        }
        .word-label {
            fill: #1f2937; /* Dark gray text */
            font-size: 12px;
            pointer-events: none; /* Make text non-clickable to allow clicking the circle underneath */
        }
        .connection-line {
            stroke: #60a5fa; /* Medium blue line */
            stroke-width: 1.5;
            opacity: 0.6;
            transition: stroke-width 0.3s ease-in-out, opacity 0.3s ease-in-out;
        }
        .highlighted-point {
            fill: #ef4444; /* Red dot for selected */
            r: 8; /* Larger when highlighted */
        }
        .highlighted-label {
            font-weight: 700; /* Bold label for selected */
            fill: #ef4444; /* Red text for selected */
        }
        .neighbor-point {
            fill: #22c55e; /* Green dot for neighbors */
            r: 7; /* Slightly larger for neighbors */
        }
        .neighbor-label {
            font-weight: 600; /* Semi-bold label for neighbors */
            fill: #22c55e; /* Green text for neighbors */
        }
    </style>
</head>
<body class="p-4 sm:p-8 flex items-center justify-center min-h-screen">
    <div class="container bg-white p-6 sm:p-8 rounded-lg shadow-xl border border-gray-200">
        <h2 class="text-2xl sm:text-3xl font-bold text-center text-gray-800 mb-6">Semantic Space Explorer: Visualizing Embeddings</h2>

        <p class="text-gray-600 mb-6 text-center leading-relaxed">
            **Embeddings** are numerical representations of words or concepts. The magic is: **words with similar meanings are numerically "close" in this space.**
            Click on any word below to see its closest semantic neighbors!
        </p>

        <div class="flex flex-col items-center justify-center mb-8">
            <svg id="embedding-svg" width="100%" height="400" viewBox="0 0 600 400" class="border border-gray-300 rounded-lg shadow-md bg-gray-50">
                </svg>
        </div>

        <div id="explanation-box" class="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg text-left text-gray-700 min-h-[80px]">
            <p class="text-sm sm:text-base">Click a word on the map to explore its semantic neighbors.</p>
        </div>

        <p class="text-gray-500 text-xs mt-4 text-center">
            *This is a simplified 2D representation of a much higher-dimensional (e.g., 768-dimensional) space used by real AI models.*
        </p>

        <script>
            // Hardcoded 2D word embeddings for demonstration
            // Coordinates are chosen to create conceptual clusters and relationships
            const wordEmbeddings = {
                // Animals (Top-Left)
                "cat": [70, 80],
                "dog": [90, 60],
                "lion": [110, 100],
                "tiger": [130, 70],
                "elephant": [150, 90],

                // Vehicles (Top-Right)
                "car": [450, 80],
                "truck": [470, 60],
                "bus": [490, 100],
                "motorcycle": [430, 70],

                // Emotions (Bottom-Left)
                "happy": [70, 300],
                "joy": [90, 320],
                "sad": [110, 280],
                "anger": [130, 310],

                // Royalty Analogy (Center)
                "man": [250, 180],
                "woman": [250, 230],
                "king": [300, 180], // man + royalty_vector_x
                "queen": [300, 230], // woman + royalty_vector_x

                // Outliers / Contrasting (Scattered, using unambiguous words)
                "cloud": [500, 350],
                "spoon": [50, 380],
                "computer": [450, 300],
                "table": [200, 50],
                "chair": [350, 350],
                "run": [200, 300],
                "walk": [220, 280]
            };

            const embeddingSvg = document.getElementById('embedding-svg');
            const explanationBox = document.getElementById('explanation-box');
            let currentSelectedWord = null;

            // Utility function to calculate Euclidean distance
            function getDistance(p1, p2) {
                return Math.sqrt(Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2));
            }

            // Function to draw all words on the SVG
            function drawWords() {
                embeddingSvg.innerHTML = ''; // Clear existing content
                console.log("drawWords called. Clearing SVG.");

                for (const word in wordEmbeddings) {
                    const coords = wordEmbeddings[word];

                    // Create circle element for the word point
                    const circle = document.createElementNS("http://www.w3.org/2000/svg", "circle");
                    circle.setAttribute("cx", coords[0]);
                    circle.setAttribute("cy", coords[1]);
                    circle.setAttribute("r", 6); // Default radius, increased for clickability
                    circle.classList.add("word-point");
                    circle.dataset.word = word; // Store word in dataset for click handling

                    // Create text element for the word label
                    const text = document.createElementNS("http://www.w3.org/2000/svg", "text");
                    text.setAttribute("x", coords[0] + 7); // Offset text slightly
                    text.setAttribute("y", coords[1] + 4);
                    text.textContent = word; // No more replace for _color etc.
                    text.classList.add("word-label");
                    text.dataset.word = word; // Store word in dataset for click handling

                    // Add click listener to the circle (text has pointer-events: none)
                    circle.addEventListener('click', () => {
                        console.log(`Word clicked: ${word}`); // Debug log
                        handleWordClick(word);
                    });

                    embeddingSvg.appendChild(circle);
                    embeddingSvg.appendChild(text);
                    console.log(`Added word: ${word} at [${coords[0]}, ${coords[1]}]`); // Debug log
                }
            }

            // Function to handle word clicks and draw connections
            function handleWordClick(clickedWord) {
                console.log(`handleWordClick called for: ${clickedWord}`); // Debug log
                currentSelectedWord = clickedWord;
                clearHighlights(); // Clear previous highlights and lines
                
                const clickedCoords = wordEmbeddings[clickedWord];
                const distances = [];

                // Calculate distances to all other words
                for (const word in wordEmbeddings) {
                    if (word === clickedWord) continue;
                    distances.push({
                        word: word,
                        distance: getDistance(clickedCoords, wordEmbeddings[word])
                    });
                }

                // Sort by distance and get top N neighbors
                distances.sort((a, b) => a.distance - b.distance);
                const closestNeighbors = distances.slice(0, 5); // Get top 5 closest neighbors
                console.log(`Closest neighbors for ${clickedWord}:`, closestNeighbors.map(n => n.word)); // Debug log

                // Highlight clicked word
                const clickedWordElements = document.querySelectorAll(`[data-word="${clickedWord}"]`);
                clickedWordElements.forEach(el => {
                    if (el.tagName === 'circle') el.classList.add('highlighted-point');
                    if (el.tagName === 'text') el.classList.add('highlighted-label');
                });

                let neighborNames = [];
                // Draw lines and highlight neighbors
                closestNeighbors.forEach(neighbor => {
                    const neighborCoords = wordEmbeddings[neighbor.word];
                    neighborNames.push(neighbor.word); // No more replace for _color etc.

                    const line = document.createElementNS("http://www.w3.org/2000/svg", "line");
                    line.setAttribute("x1", clickedCoords[0]);
                    line.setAttribute("y1", clickedCoords[1]);
                    line.setAttribute("x2", neighborCoords[0]);
                    line.setAttribute("y2", neighborCoords[1]);
                    line.classList.add("connection-line");
                    embeddingSvg.prepend(line); // Add line before points so points are on top
                    console.log(`Drawing line from ${clickedWord} to ${neighbor.word}`); // Debug log

                    const neighborElements = document.querySelectorAll(`[data-word="${neighbor.word}"]`);
                    neighborElements.forEach(el => {
                        if (el.tagName === 'circle') el.classList.add('neighbor-point');
                        if (el.tagName === 'text') el.classList.add('neighbor-label');
                    });
                });

                // Update explanation text
                explanationBox.innerHTML = `<p class="text-sm sm:text-base">The word "<strong>${clickedWord}</strong>" is semantically similar to <strong>${neighborNames.join(', ')}</strong> because they are numerically close in this conceptual space.</p>`;
            }

            // Function to clear all highlights and lines
            function clearHighlights() {
                document.querySelectorAll('.highlighted-point, .neighbor-point').forEach(el => {
                    el.classList.remove('highlighted-point', 'neighbor-point');
                });
                document.querySelectorAll('.highlighted-label, .neighbor-label').forEach(el => {
                    el.classList.remove('highlighted-label', 'neighbor-label');
                });
                document.querySelectorAll('.connection-line').forEach(el => el.remove());
                console.log("Highlights and lines cleared."); // Debug log
            }

            // Initialize the visual when the page loads
            window.addEventListener('load', () => {
                console.log("Window loaded. Initializing visual..."); // Debug log
                // Adding a small timeout to ensure all rendering is complete,
                // especially in environments like iframes where timing can be tricky.
                setTimeout(() => {
                    drawWords();
                    // Highlight 'dog' by default to show initial state
                    handleWordClick('dog');
                }, 100); // 100ms delay
            });

            // Handle responsiveness (redraws all points on resize)
            window.addEventListener('resize', () => {
                console.log("Window resized. Redrawing..."); // Debug log
                drawWords(); // Redraws points to adjust positions visually if needed (though SVG scales)
                if (currentSelectedWord) {
                   handleWordClick(currentSelectedWord); // Re-highlight if a word was selected
                }
            });

        </script>
    </div>
</body>
</html>
